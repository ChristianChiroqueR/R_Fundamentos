# Transformación de tablas y otros

## Objetivos de la sesión

- En esta clase exploraremos algunas funciones para manipulación de tablas tanto de dplyr como del paquete tidyr. 

## Base de datos

Abrimos nuestra base de datos:

```{r message=FALSE, warning=FALSE}
library(tidyverse)
```

```{r}
library(readxl)
dataf<-read_xlsx("data/resultados_sv_2021.xlsx")
```

Exploramos:

```{r}
names(dataf)
```

## Configuración de variables

Vemos que la variable **castillo** y **keiko** se encuentran como *character*.

```{r}
glimpse(dataf)
```

Este caso podemos **coercionar** estos vectores para que sean numéricos utilizando la función **as.numeric()**:

```{r}
as.numeric(dataf$castillo) #En este caso SÓLO ESTAMOS VISUALIZANDO la variable convertida a numérica
```

```{r}
dataf$castillo<-as.numeric(dataf$castillo) #Con el signo de asignación estamos CREANDO (o sobreescribiendo) la variable.
```

Lo comprobamos solicitando su clase:

```{r}
class(dataf$castillo)
```

Si queremos hacer muchas coerciones de forma simultánea podemos utilizar la función lapply(), la cual es una de las funciones de la familia "apply" en R, diseñada para aplicar una función a los elementos de una lista o a los componentes de un objeto.

```{r}
dataf[,6:7]<-lapply(dataf[,6:7], as.numeric)
```


## Etiquetas a las variables

El etiquetado de columnas en R sirve para asignar descripciones más significativas o detalladas a las variables de un conjunto de datos. Las etiquetas mejoran la legibilidad y comprensión del código y los resultados, y son particularmente valiosas en análisis estadísticos, informes, y visualizaciones donde el contexto y la claridad son cruciales.

Por ejemplo, label(dataf$castillo) <- "Votación por Castillo" asigna la etiqueta "Votación por Castillo" a la columna castillo del dataframe dataf. Este método es útil para aclarar el significado de las variables, especialmente cuando los nombres de las columnas son breves o técnicos. 

```{r message=FALSE, warning=FALSE}
library(Hmisc)
label(dataf$castillo)<-"Votación por Castillo"
label(dataf$keiko)<-"Votación por Keiko"
```


## Repasa case_when()

Recuerda que la función case_when() del paquete dplyr sirve para recodificar datos y crear nuevas variables o modificar variables existentes basándose en múltiples condiciones.

Permite evaluar varias condiciones utilizando una sintaxis similar a una instrucción "if-else". Esta función es particularmente útil cuando necesitamos recodificar una variable en varias categorías o cuando tenemos múltiples condiciones a evaluar.

Podemos realizar:

```{r}
dataf<-dataf  |>   # Data
  select(3,4,6,7)  |>  # Selecciono estas columnas 
    mutate(nivel_respaldo_castillo=  #Creo una nueva variable que se llamará "nivel_respado_castillo"...
        case_when(castillo<30~"Bajo",  # donde se le asigna la etiqueta "Bajo" si es menor a 30...
                  castillo<60~"Medio", # la etiqueta "Medio" si es menor a 60 y...
                  TRUE~"Alto")) # la etiqueta "Alto" a todas las demás que no cumplen con lo anterior. 
```

Como en este caso la variable es ordinal, hay que especificarle ello al R:

```{r}
dataf$nivel_respaldo_castillo<-factor(dataf$nivel_respaldo_castillo, 
                                       levels = c("Bajo", "Medio", "Alto"), ordered = T)

label(dataf$nivel_respaldo_castillo) = "Nivel de respaldo a Pedro Castillo"
```


::: callout-note
Podríamos generar otra variable que indique quién ganó en esa provincia. Cómo sería?
:::

## Tablas de resumen con `gtsummary`

![](https://www.danieldsjoberg.com/gtsummary/logo.png)

El paquete gtsummary en R (2019) es una herramienta diseñada para simplificar y agilizar la creación de tablas resumen estadísticas y de datos. Es conocido por ser útil especialmente en el contexto de la investigación biomédica y la epidemiología, pero aplica para todos los rubros. 

Este paquete permite a los usuarios generar rápidamente tablas bien formateadas que resumen características básicas de un conjunto de datos, como medias, medianas, intervalos, y frecuencias. También es capaz de realizar pruebas estadísticas y presentar sus resultados de manera clara y concisa. La gran ventaja de gtsummary es que convierte procesos que normalmente requerirían varias líneas de código y un conocimiento profundo de estadísticas en tareas mucho más sencillas y directas, facilitando la comunicación de resultados estadísticos y la elaboración de informes y publicaciones científicas.


### tbl_summary() para resumir

Se utiliza para crear tablas resumen detalladas y bien formateadas de las características de las variables en un conjunto de datos.

Para esta función se le pueden incluir los siguientes "tipos" de variables: continuous, categorical, dichotomous, y continuous2.

- Las variables continuous se refieren a variables numéricas que se resumen en una sola fila, típicamente con estadísticas como la media y la desviación estándar. 

- Las variables categorical son aquellas con un número limitado de categorías o grupos, y se resumen mostrando conteos y porcentajes para cada categoría. 

- Las variables dichotomous son un caso especial de variables categóricas con solo dos categorías, como 'Sí' o 'No'. 

- Finalmente, continuous2 es similar a continuous, pero ofrece un resumen más detallado al desglosar las estadísticas en dos o más filas, permitiendo una representación más completa de los datos numéricos.

Antes de hacer nuestras tablas, hay que decirle al R que el lenguaje que estamos usando es español y que nuestro separador de decimales es el ".":

```{r}
library(gtsummary)
theme_gtsummary_language(
  language = "es",
  decimal.mark = "."
)
```



Primero hagamos una prueba con nuestra data que tiene dos variables **continuous** y una **categorical**. Podemos notar que para la primera sólo lo resume en una línea (mediana y rango intercuartílico), mientras que para la segunda te muestra la frecuencia y porcentaje de cada categoría.

```{r}
dataf |> 
  select(castillo, keiko, nivel_respaldo_castillo) |> 
  tbl_summary()
```


Podemos modificar para que ahora nos muestre la **Media(Desviación estándar)** para todas las numéricas:

```{r}
library(gtsummary)
dataf |> 
  select(castillo, keiko, nivel_respaldo_castillo) |> 
  tbl_summary(statistic = list(all_continuous() ~ "{mean} ({sd})"))
```



Ahora generamos una variable dicotómica dummy que indique si es que en la provincia ganó Castillo:

```{r}
dataf<-dataf  |>   # Data
      mutate(castillo_gano=  
        case_when(castillo>keiko~1,  
                  TRUE~0))
label(dataf$castillo_gano)="Ganó Pedro Castillo"
```


Y solicitamos nuevamente la tabla resumen. Vemos que al ser dicotómica lo presenta en una sola línea:

```{r}
dataf |> 
  select(castillo, keiko, nivel_respaldo_castillo, castillo_gano) |> 
  tbl_summary(statistic = list(all_continuous() ~ "{mean} ({sd})"))
```


Y qué pasaría si queremos convertir una de nuestra continuous en continuous2? Es decir, solicitarle que nos de mayor información?

```{r}
dataf |> 
  select(castillo, keiko, nivel_respaldo_castillo, castillo_gano) |> 
  tbl_summary(
    type = keiko ~ "continuous2",
    statistic = list(all_continuous() ~ "{mean} ({sd})",
                    all_continuous2() ~ c("{mean} ({sd})", "{min}, {max}")))
```

### Personalización de encabezados

Finalmente, podemos personalizar aún más la tabla con los comandos **modify_header** y **modify_caption** para editar los encabezados en nuestro idioma. 


```{r}
dataf |> 
  select(castillo, keiko, nivel_respaldo_castillo, castillo_gano) |> 
  tbl_summary(
    type = keiko ~ "continuous2",
    statistic = list(all_continuous() ~ "{mean} ({sd})",
                    all_continuous2() ~ c("{mean} ({sd})", "{min}, {max}"))) |> 
  modify_header(label = "**Variable de interés**") |> 
  modify_caption("**Tabla resumen con `gtsummary`**") 
```


### Videos recomendados 

Te recomiendo ver estos dos tutoriales sobre gtsummary, ambos muy buenos. Ten en cuenta que en estos casos ya entran más a detalle sobre la generación de tablas de resumen con este paquete:

https://www.youtube.com/watch?v=6QTrzd2Wxrs

https://www.youtube.com/watch?v=tANo9E1SYJE



## Mutating Joins

![](https://svmiller.com/images/sql-joins.jpeg)

Los mutating joins son una serie de funciones en R, particularmente en el paquete dplyr, que permiten combinar dos tablas basadas en columnas clave compartidas. Estas funciones no solo agregan filas de una tabla a otra, sino que también modifican las columnas de la tabla original al añadir información de la tabla complementaria. Entre los mutating joins más comunes se encuentran left_join(), right_join(), inner_join() y full_join(), cada uno diseñado para combinar tablas de diferentes maneras según las relaciones entre las claves de las tablas. 

### Tablas de ejemplo

Generamos dos tablas a modo de ejemplo:

```{r}
# Crear la primera tabla de ejemplo
tabla1 <- data.frame(
  ID = 1:10,
  Nombre = c('Ana', 'Carlos', 'Elena', 'Luis', 'María', 'Pedro', 'Rosa', 'José', 'Clara', 'Marta'),
  Edad = c(23, 34, 45, 28, 39, 41, 30, 38, 33, 29)
)

# Crear la segunda tabla de ejemplo
tabla2 <- data.frame(
  ID = c(1, 3, 5, 7, 9, 11, 12, 13, 14, 15),
  Puntaje = c(88, 92, 75, 85, 90, 67, 72, 83, 94, 77)
)
```


Las visualizamos:

```{r}
tabla1
```

La tabla 2: 

```{r}
tabla2
```


### Variable KEY

La variable key es la columna o conjunto de columnas que existen en ambas tablas y que se usan para encontrar las filas correspondientes en cada tabla. Es esencialmente el criterio de emparejamiento. Por ejemplo, si tienes una tabla con datos demográficos de personas (tabla1) y otra con sus puntajes en un examen (tabla2), la clave podría ser una columna como ID que identifique de manera única a cada persona en ambas tablas.


::: callout-tip
La variable key (o clave) se precisará el argumento `by` dentro de las funciones left_join(), right_join(), inner_join() y full_join().
:::


### left_join()

left_join() toma todas las filas de tabla1 (la tabla de la izquierda) y añade las columnas de tabla2 donde haya coincidencias en la columna ID. Si no hay coincidencia en tabla2, las nuevas columnas tendrán valores NA

```{r}
left_join_result <- left_join(tabla1, tabla2, by = "ID")
left_join_result
```

### right_join()

right_join() toma todas las filas de tabla2 (la tabla de la derecha) y añade las columnas de tabla1 donde haya coincidencias en la columna ID. Si no hay coincidencia en tabla1, las nuevas columnas tendrán valores NA.


```{r}
right_join_result <- right_join(tabla1, tabla2, by = "ID")
right_join_result
```


### inner_join()

Devuelve solo las filas donde haya coincidencias en la columna ID en ambas tablas. Las filas sin coincidencia son eliminadas del resultado.


```{r}
inner_join_result <- inner_join(tabla1, tabla2, by = "ID")
inner_join_result
```

### full_join()

Devuelve todas las filas de ambas tablas. Si hay coincidencia en la columna ID, las filas se combinan; si no hay coincidencia, se incluyen las filas con valores NA en las columnas donde no hubo coincidencia.

```{r}
full_join_result <- full_join(tabla1, tabla2, by = "ID")
full_join_result
```


### Lectura recomendada

Te sugiero leer el capítulo "Joins" de R for Data Science [en este link](https://r4ds.hadley.nz/joins.html).


